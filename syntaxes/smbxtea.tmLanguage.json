{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SMBX Tea",
	"scopeName": "source.smt",


	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#expression"
		}
	],


	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.smbxtea",
				"match": "\\b(As|Call|Case|Dim|Else|ElseIf|End|Export|For|GoTo|GoSub|If|next|Return|Script|Select|Step|Then|To|While|With)\\b"
			}]
		},
		"entity" : {
			"name":"entity.name.tag",
			"patterns": [{
				"name": "keyword.control.smbxtea",
				"match": "\\b(Array|GVal|ReDim|v|Val)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.smbxtea",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.smbxtea",
					"match": "\\\\."
				}
			]
		},
		"numeric":{
			"patterns": [{
				"name": "constant.numeric.smbxtea",
				"match": "\\b([0-9]+\\.?[0-9]*)\\b"
			}]
		},
		"comment": {
			"name" : "comment.line",
			"patterns": [
				{
					"name" : "comment.line",
					"match": "'.*$"
				}
			]
		},
		"buildin_type":{
			"patterns": [{
				"name": "storage.type.smbxtea",
				"match": "\\b(Integer|Double|Long|Byte)\\b"
			}]
		},
		"type":{
			"patterns": [{
				"include": "#buildin_type"
			}, {
				"name": "entity.name.type.smbxtea",
				"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
			}]
		},
		"identifier": {
			"patterns": [{
				"name": "entity.name.smbxtea",
				"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
			}]
		},
		"operators":{
			"patterns": [{
				"name": "keyword.operator.smbxtea",
				"match": "([+\\-\\*/<>\\?\\!.]|\\bAnd\\b|\\bOr\\b|\\bNot\\b|\\bXor\\b|\\bEqv\\b|\\bImp\\b)"
			}]
		},
		"expression":{
			"patterns": [{
				"include": "#numeric"
			},
			{
				"include": "#call_function"
			},
			{
				"include": "#identifier"
			},
			{
				"include": "#operators"
			}]
		},

		"declare":{
			"patterns": [
				{
					"include": "#declare_function"
				},
				{
					"include": "#declare_variable"
				}
			]
		},
		"declare_variable":{
			"name": "meta.var.declare",
			"match": "(?:\\bDim\\s+)([_a-zA-Z][_a-zA-Z0-9]*)(?:\\s+As\\s+)([_a-zA-Z][_a-zA-Z0-9]*\\b)(.*)",
			"captures": {
				"1":{
					"name":"comment.line",
					"patterns": [{
						"include": "#identifier"
					}]},
				"2":{
					"patterns":[{
						"include": "#type"
					}]},
				"3":{
					"patterns": [{
						"include": "#expression"
					}]}
				}
		},
		"declare_param" : {
			"patterns": [{
				"name": "meta.function.parameters",
				"begin": "\\(",
				"end": "\\)",
				"patterns": [{
						"include": "#keywords"
					},
					{
						"include": "#declare_params_variable"
					}
				]
			}]
		},
		"declare_function":{
			"patterns": [
				{
					"name" : "meta.function.smbxtea",
					"begin": "(?:\\bExport\\s+)?(?:\\bScript\\s+)([_a-zA-Z][_a-zA-Z0-9]*)(\\([\\s\\S]*\\))",
					"end": "$",
					"captures": {
						"1":{
							"name": "entity.name.function.smbxtea",
							"patterns": [{
							"include": "#identifier"
						}]},
						"2":{
							"patterns": [{
								"include": "#declare_params_variable"
						}]}
					},
					"patterns": [{
						"include": "#block_function"
					},
					{
						"include": "#comment"
					}]
				}
			]
		},
		"declare_params_variable":{
			"name": "meta.var.declare",
			"match": "(\\b[_a-zA-Z][_a-zA-Z0-9]*\\b)(?:\\bAs\\b)(\\b[_a-zA-Z][_a-zA-Z0-9]*\\b)(.*)",
			"captures": {
				"1":{
					"patterns": [{
						"include": "#identifier"
					}]},
				"2":{
					"patterns":[{
						"include": "#type"
					}]},
				"3":{
					"patterns": [{
						"include": "#expression"
					}]}
				}
		},

		"call_function":{
			"patterns": [{
				"match": "([_a-zA-Z][_a-zA-Z0-9]*)(\\((([^/]|/(?!\\*))*)((/\\*.*?\\*/)(([^/]|/(?![*/]))*))*\\))(\\b'.*)",
				"captures": {
					"1": {
						"name": "entity.name.function.smbxtea",
						"patterns": [{
							"include": "#identifier"
						}]
					},
					"2": {
						"name": "meta.function.parameters.smbxtea",
						"patterns": [{
							"include": "#params"
						}]
					},
					"3": {
						"name" : "meta.function.comment.smbxtea",
						"patterns": [{
							"include": "#comment"
						}]
					}
				}
			}]
		},
		"params":{
			"name" : "meta.function.callparameters",
			"begin": "\\(",
			"end": "\\)",
			"patterns": [{
				"include": "#expression"
			}]
		},

		"block":{
			"name": "meta.block.smbxtea",
			"patterns": [{
				"include": "#comment"
			},
			{
				"include": "#declare_variable"
			},
			{
				"include": "#block"
			},
			{
				"include": "#keywords"
			},
			{
				"include": "#expr"
			}]
		},
		"block_function":{
			"name": "meta.block.function.smbxtea",
			"begin":"(\\bExport\\s+)?(\\bScript\\s+)([_a-zA-Z][_a-zA-Z0-9]*)(\\([\\s\\S]*\\))",
			"end":"\\bEnd\\s+Script\\b",
			"patterns": [{
				"include": "#block"
			}
		]
		}
	}
}